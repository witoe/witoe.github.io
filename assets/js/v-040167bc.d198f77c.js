"use strict";(self.webpackChunkblog2=self.webpackChunkblog2||[]).push([[3922],{9365:(e,t,a)=>{a.r(t),a.d(t,{data:()=>i});const i={key:"v-040167bc",path:"/javascript/reading-notes.html",title:"Reading Notes",lang:"en-US",frontmatter:{title:"Reading Notes"},excerpt:"",headers:[{level:2,title:"Javascript: The Definitive Guide",slug:"javascript-the-definitive-guide",children:[]},{level:2,title:"Javascript 设计模式与开发实践",slug:"javascript-设计模式与开发实践",children:[]},{level:2,title:"Javascript 高级编程",slug:"javascript-高级编程",children:[{level:3,title:"BOM",slug:"bom",children:[]},{level:3,title:"DOM",slug:"dom",children:[]}]},{level:2,title:"Javascript DOM 编程艺术（第2版）",slug:"javascript-dom-编程艺术-第2版",children:[]}],filePathRelative:"javascript/reading-notes.md",git:{updatedTime:1637811914e3,contributors:[{name:"guyong",email:"jcel@qq.com",commits:2}]}}},1770:(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a(6252);const d=(0,i._)("p",null,"Notes taken when reading books, wepages, etc.",-1),l=(0,i._)("h2",{id:"javascript-the-definitive-guide",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#javascript-the-definitive-guide","aria-hidden":"true"},"#"),(0,i.Uk)(" Javascript: The Definitive Guide")],-1),c=(0,i.Uk)("link"),r=(0,i.uE)('<h2 id="javascript-设计模式与开发实践" tabindex="-1"><a class="header-anchor" href="#javascript-设计模式与开发实践" aria-hidden="true">#</a> Javascript 设计模式与开发实践</h2><p>人类可以走到生物链顶端的前两个原因分别是会“使用名字” 和“使用工具” 分辨模式的关键是意图而不是结构</p><h2 id="javascript-高级编程" tabindex="-1"><a class="header-anchor" href="#javascript-高级编程" aria-hidden="true">#</a> Javascript 高级编程</h2><p>ECMAScript与javascript基本上指的同一个东西，但javascript的完整实现应该由下列三个部分组成：</p><ul><li>ECMAScript</li><li>DOM</li><li>BOM</li></ul><p>ECMAScript 本身与浏览器没有依赖关系, 语言本身并不包含输入输出定义（C/C++也是)。宿主环境除了常见的Web浏览器，还包括Node和Adobe Flash.</p><h3 id="bom" tabindex="-1"><a class="header-anchor" href="#bom" aria-hidden="true">#</a> BOM</h3><p>核心是window对象，location，navigator, screen, history</p><h3 id="dom" tabindex="-1"><a class="header-anchor" href="#dom" aria-hidden="true">#</a> DOM</h3><p>Node DOCUMENT, ELEMENT HTMLDocument, HTMLElement</p><p>标准DOM API HTML5 扩展DOM API</p><h2 id="javascript-dom-编程艺术-第2版" tabindex="-1"><a class="header-anchor" href="#javascript-dom-编程艺术-第2版" aria-hidden="true">#</a> Javascript DOM 编程艺术（第2版）</h2><p>设计原则：</p><ul><li>平衡退化：确保网页在没有javascript的情况下也能正常工作(例如：搜索引擎）</li><li>渐进增强: 从最核心的内容（html标记)开始, 逐步通过css和DOM来增强</li><li>以用户为中心</li></ul><p>DOM vs. BOM, document vs. window</p><p>DOM有三种节点(node)</p><ul><li>element (nodeType 为 1）</li><li>attribute （nodeType 为 2)</li><li>text (nodeType 为 3)</li></ul><p>其中 text, attribute node只能存在于某个Element node中。</p><p>注意区分：document, DOM Element, DOM Node. 在javascript中每个DOM节点都是一个Object, <code>document</code>本身不是节点。 <code>document</code>提供以下方法：<code>getElementById, getElementsByTagName, getElementsByClassName, createElement, createAttribute, createTextNode</code> Element node提供以下方法：<code>getElementsByTagName, getElementsByClassName, getAttribute, setAttribute</code></p><p><code>&lt;head&gt;</code>中的<code>&lt;script&gt;</code>标签引入的js代码会先于body加载，会出现DOM未就绪就引用DOM的问题。置于<code>&lt;/body&gt;</code>之前也不能保证script 与 DOM哪个先加载完。可以使用<code>onload</code>来解决。</p><p>HTML-DOM vs. DOM-Core</p><p>DOM中访问style属性时会将带<code>-</code>的属性名变成驼峰命名，例如 css 属性 <code>font-family</code> 在DOM中需要用 fontFamily来访问. DOM中只能提取内嵌在元素上的style属性，不能提取css文件中的style.</p>',22),s={},n=(0,a(3744).Z)(s,[["render",function(e,t){const a=(0,i.up)("RouterLink");return(0,i.wg)(),(0,i.iD)(i.HY,null,[d,l,(0,i._)("p",null,[(0,i.Wm)(a,{to:"/javascript/js-TDG.html"},{default:(0,i.w5)((()=>[c])),_:1})]),r],64)}]])},3744:(e,t)=>{t.Z=(e,t)=>{const a=e.__vccOpts||e;for(const[e,i]of t)a[e]=i;return a}}}]);