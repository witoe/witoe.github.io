"use strict";(self.webpackChunkblog2=self.webpackChunkblog2||[]).push([[6343],{7813:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s={key:"v-18ded856",path:"/javascript/introduction.html",title:"Basics",lang:"en-US",frontmatter:{title:"Basics"},excerpt:"",headers:[{level:2,title:"Basics",slug:"basics",children:[]},{level:2,title:"How to use it ?",slug:"how-to-use-it",children:[]},{level:2,title:"Data types",slug:"data-types",children:[{level:3,title:"typeof operator and equality",slug:"typeof-operator-and-equality",children:[]}]},{level:2,title:"Object",slug:"object",children:[]},{level:2,title:"Declaration",slug:"declaration",children:[{level:3,title:"value",slug:"value",children:[]},{level:3,title:"variable scope",slug:"variable-scope",children:[]},{level:3,title:"variable hositing and function hoisting",slug:"variable-hositing-and-function-hoisting",children:[]},{level:3,title:"global variables",slug:"global-variables",children:[]}]}],filePathRelative:"javascript/introduction.md",git:{updatedTime:163774408e4,contributors:[{name:"guyong",email:"jcel@qq.com",commits:1}]}}},711:(e,n,a)=>{a.r(n),a.d(n,{default:()=>m});var s=a(6252);const t=(0,s.uE)('<h2 id="basics" tabindex="-1"><a class="header-anchor" href="#basics" aria-hidden="true">#</a> Basics</h2><ul><li>scripting language (interpreted, not complied)</li><li>object-oriented (inheritance, encapsulation, polymorphism)</li><li>prototype-based (also called classless, prototype-oriented, or instance-based) prototype is essentially object, which can be modified dynamically, while &quot;class&quot; can&#39;t</li><li>dynamic-typing (type of variable are not fixed)</li></ul><h2 id="how-to-use-it" tabindex="-1"><a class="header-anchor" href="#how-to-use-it" aria-hidden="true">#</a> How to use it ?</h2><p>In order to be executed by a browser, js scripts should be used by embeding it in a html file. You can directly place js source code in html with <code>&lt;script&gt;</code> tag <code>&lt;script&gt;...&lt;/script&gt;</code> or place it in a seperate js file then include it in the html file using <code>&lt;script src=&quot;/path/to/js&quot;&gt;&lt;/script&gt;</code> Js script can be placed anywhere in html file. Usually it is placed in <code>&lt;head&gt;</code>. Placing it at the bottom of page can avoid possible loading delay.</p><h2 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types" aria-hidden="true">#</a> Data types</h2><p>JavaScript has six data types. Five data types are primitives:</p><ul><li>string</li><li>number</li><li>bigInt</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol: (since ES2015) A data type whose instances are unique and immutable.</li></ul><p>One type is complex:</p><ul><li>object ( includes array, function )</li></ul><h3 id="typeof-operator-and-equality" tabindex="-1"><a class="header-anchor" href="#typeof-operator-and-equality" aria-hidden="true">#</a> <code>typeof</code> operator and equality</h3>',10),l={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#Description",target:"_blank",rel:"noopener noreferrer"},i=(0,s.Uk)("A summarization from MDN"),o=(0,s.uE)('<blockquote><p>You can consider it a bug in JavaScript that typeof null is an object. It should be null.</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span>             <span class="token comment">// undefined</span>\n<span class="token keyword">typeof</span> <span class="token keyword">null</span>                  <span class="token comment">// object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>All <code>new</code> expression results in type <code>object</code>, except:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>console.log(typeof new Function())    // &#39;function&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),c={href:"https://dorey.github.io/JavaScript-Equality-Table/",target:"_blank",rel:"noopener noreferrer"},r=(0,s.Uk)("javascript equality table"),p=(0,s._)("br",null,null,-1),u={href:"https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons",target:"_blank",rel:"noopener noreferrer"},d=(0,s._)("code",null,"===",-1),b=(0,s.Uk)(" vs. "),h=(0,s._)("code",null,"==",-1),v=(0,s.uE)('<p>Do not confuse the primitive Boolean values true and false with truthiness or falsiness of the <code>Boolean</code> object. Any value that is not <code>false</code>, <code>undefined</code>, <code>null</code>, <code>0</code>, <code>-0</code>, <code>NaN</code>, or the empty string (<code>&quot;&quot;</code>), and any object, including a Boolean object whose value is false, is considered truthy when used as the condition.</p><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h2><h2 id="declaration" tabindex="-1"><a class="header-anchor" href="#declaration" aria-hidden="true">#</a> Declaration</h2><p>There are three types of declarations (since ES6):</p><ul><li>var: global variable or function level variable.</li><li>let: block level local variable.</li><li>const: read-only constant. Itself can&#39;t be assigned while it&#39;s properties can. Must be initialized. It&#39;s scope is the same as &#39;let&#39;</li></ul><h3 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> value</h3><p>variables declared by &#39;let&#39; and &#39;var&#39; with no initial value has the value &quot;undefined&quot;</p><h3 id="variable-scope" tabindex="-1"><a class="header-anchor" href="#variable-scope" aria-hidden="true">#</a> variable scope</h3><ul><li>global: declared outside of function</li><li>local: declared in function function level<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if (true) {\n  var x = 5;\n}\nconsole.log(x);  // x is 5\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>block level<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>if (true) {\n  let y = 5;\n}\nconsole.log(y);  // ReferenceError: y is not defined\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="variable-hositing-and-function-hoisting" tabindex="-1"><a class="header-anchor" href="#variable-hositing-and-function-hoisting" aria-hidden="true">#</a> variable hositing and function hoisting</h3><p>Variables in JavaScript are in a sense &quot;hoisted&quot; or lifted to the top of the function or statement. However, variables that are hoisted will return a value of undefined. In ECMAScript 2015, let (const) will not hoist the variable to the top of the block. For functions, only function declaration gets hoisted to the top and not the function expression.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/* Function declaration */</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;bar&quot;</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">/* Function expression */</span>\n\n<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: baz is not a function</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;bar2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="global-variables" tabindex="-1"><a class="header-anchor" href="#global-variables" aria-hidden="true">#</a> global variables</h3><p>Global variables are in fact properties of the global object. In web pages the global object is window</p>',14),f={},m=(0,a(3744).Z)(f,[["render",function(e,n){const a=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s._)("p",null,[(0,s._)("a",l,[i,(0,s.Wm)(a)])]),o,(0,s._)("p",null,[(0,s._)("a",c,[r,(0,s.Wm)(a)]),p,(0,s._)("a",u,[d,b,h,(0,s.Wm)(a)])]),v],64)}]])},3744:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}}}]);