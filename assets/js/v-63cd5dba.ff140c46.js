"use strict";(self.webpackChunkblog2=self.webpackChunkblog2||[]).push([[7701],{3290:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-63cd5dba",path:"/python/",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Key Points",slug:"key-points",children:[{level:3,title:"Important and hard points",slug:"important-and-hard-points",children:[]},{level:3,title:"Common libraries",slug:"common-libraries",children:[]},{level:3,title:"Common builtin functions",slug:"common-builtin-functions",children:[]},{level:3,title:"编码",slug:"编码",children:[]},{level:3,title:"Common Containers",slug:"common-containers",children:[]},{level:3,title:"Types Classification",slug:"types-classification",children:[]},{level:3,title:"Iterable, Iterator, Generator",slug:"iterable-iterator-generator",children:[]},{level:3,title:"Slicing",slug:"slicing",children:[]},{level:3,title:"Functions",slug:"functions",children:[]},{level:3,title:"Dictionary",slug:"dictionary",children:[]},{level:3,title:"Some Details",slug:"some-details",children:[]},{level:3,title:"Module",slug:"module",children:[]}]},{level:2,title:"Resources",slug:"resources",children:[{level:3,title:"Articles",slug:"articles",children:[]},{level:3,title:"Tools",slug:"tools",children:[]}]}],filePathRelative:"python/README.md",git:{updatedTime:163774408e4,contributors:[{name:"guyong",email:"jcel@qq.com",commits:1}]}}},8838:(n,s,a)=>{a.r(s),a.d(s,{default:()=>y});var e=a(6252);const t=(0,e.uE)('<h2 id="key-points" tabindex="-1"><a class="header-anchor" href="#key-points" aria-hidden="true">#</a> Key Points</h2><h3 id="important-and-hard-points" tabindex="-1"><a class="header-anchor" href="#important-and-hard-points" aria-hidden="true">#</a> Important and hard points</h3><ol><li>强类型，动态类型, 脚本语言</li><li>No compile time, only runtime.</li><li>assignment is name binding. Shallow copy. Immutable, mutable.</li><li>Virtually everything that your Python program creates or acts on is an object: functions, classes, types</li><li>Namespace, Context, scope, closure.</li><li>Iterable, iterator, generator, comprehension</li></ol><h3 id="common-libraries" tabindex="-1"><a class="header-anchor" href="#common-libraries" aria-hidden="true">#</a> Common libraries</h3><p>math, random, re, time, timeit, profile, struct, itertools, functools, operator</p><h3 id="common-builtin-functions" tabindex="-1"><a class="header-anchor" href="#common-builtin-functions" aria-hidden="true">#</a> Common builtin functions</h3><p>help, dir, len, range, sum, map, filter, reduce, zip, sorted, isinstance, type, copy, next, enumerate, getattr, hasattr, setattr, iter, id, reversed, type, slice</p><h3 id="编码" tabindex="-1"><a class="header-anchor" href="#编码" aria-hidden="true">#</a> 编码</h3><p>python使用unicode编码, 字符串以unicode储存在内存中. python区分字符串string和字节串bytes.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token string">&#39;ABC&#39;</span>.decode<span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span>\n<span class="token string">&#39;ABC&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b<span class="token string">&#39;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#39;</span>.decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>\n<span class="token string">&#39;中文&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="common-containers" tabindex="-1"><a class="header-anchor" href="#common-containers" aria-hidden="true">#</a> Common Containers</h3><p>ordered set: use <code>OrderedDict</code><br> multiset, multiDict: use <code>set</code> and <code>dict</code><br> deque: <code>deque</code> priority queue: <code>heapq</code></p><h3 id="types-classification" tabindex="-1"><a class="header-anchor" href="#types-classification" aria-hidden="true">#</a> Types Classification</h3><ul><li>immutable: number, string, tuple</li><li>mutable: list, dict, class-object</li></ul><p>Function arguments are passed by values: immutable objects are copied by value, while mutable objects are copied by aliasing.</p><p>classes themselves are objects.</p><h3 id="iterable-iterator-generator" tabindex="-1"><a class="header-anchor" href="#iterable-iterator-generator" aria-hidden="true">#</a> Iterable, Iterator, Generator</h3><ul><li>Iterable: implementing iter() to return an iterator.</li><li>Iterator: implementing next() and using StopIteration to indicate the end of iteration.</li><li>Generator: a function returning an iterator.</li></ul><p>An iterator can be traversed only once:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> zipped <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;ABCD&#39;</span><span class="token punctuation">)</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="slicing" tabindex="-1"><a class="header-anchor" href="#slicing" aria-hidden="true">#</a> Slicing</h3><p>In s[i:j:k], if <code>i</code> or <code>j</code> is negative, the index is relative to the end of sequence <code>s</code>: <code>len(s) + i</code> or <code>len(s) + j</code> is substituted. But note that <code>-0</code> is still <code>0</code>. <code>k</code> must be a nonzero integer.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">&quot;ab\\\\cdefg&quot;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># In s[a:b:c], c must be nonzero</span>\n<span class="token string">&#39;gfedc\\\\ba&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span>\n<span class="token string">&#39;ab\\\\cdefg&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n<span class="token number">8</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token string">&#39;a\\\\df&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token string">&#39;&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token string">&#39;b\\\\cdef&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> L\ni <span class="token operator">=</span> <span class="token number">6</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[5, 1]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[5, 1, 2]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[5, 1, 2, 3]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Each call creates a scope object, in which there is a local <code>L</code> pointing to the <code>L</code> in the function object <code>f</code>. So each call of <code>L.append(a)</code> change the <code>L</code> in <code>f</code>. Compare with the following</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">5</span>\n<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    L <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span>\n    <span class="token keyword">return</span> L\ni <span class="token operator">=</span> <span class="token number">6</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[5 1]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[5 2]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[5 3]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="dictionary" tabindex="-1"><a class="header-anchor" href="#dictionary" aria-hidden="true">#</a> Dictionary</h3><p>Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key.</p><h3 id="some-details" tabindex="-1"><a class="header-anchor" href="#some-details" aria-hidden="true">#</a> Some Details</h3><ol><li><p>赋值表达式右边的先执行完，再执行左边的</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a <span class="token comment"># swap</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>list slice在赋值表达式左边时，等价于先删除某些位置的值，再在某一个位置插入一组值</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># [0,1,2,3,4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>An assignment is a statement, not an expression.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># error</span>\n <span class="token keyword">pass</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><p>The hierarchy of python program structure:</p><ol><li>Programs are composed of modules.</li><li>Modules contain statements.</li><li>Statements contain expressions.</li><li>Expressions create and process objects.</li></ol><h3 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> Module</h3><p>A program doesn’t run any faster when it is read from a .pyc file than when it is read from a .py file; the only thing that’s faster about .pyc files is the speed with which they are loaded.</p><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h2><h3 id="articles" tabindex="-1"><a class="header-anchor" href="#articles" aria-hidden="true">#</a> Articles</h3>',37),p={href:"https://realpython.com/python-zip-function/",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("python zip"),c={href:"https://realpython.com/python-namespaces-scope/",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("python namespace scope"),r={href:"https://realpython.com/python-lambda/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("python lambda"),u={href:"https://realpython.com/python-reduce-function/",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("python reduce"),k=(0,e._)("h3",{id:"tools",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#tools","aria-hidden":"true"},"#"),(0,e.Uk)(" Tools")],-1),m={href:"https://pythontutor.com",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("Python tutor: visualize execution"),h=(0,e.Uk)(" (including c,c++,java,javascript)"),g={},y=(0,a(3744).Z)(g,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[(0,e._)("a",p,[o,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",c,[l,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",r,[i,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",u,[d,(0,e.Wm)(a)])]),k,(0,e._)("p",null,[(0,e._)("a",m,[b,(0,e.Wm)(a)]),h])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);