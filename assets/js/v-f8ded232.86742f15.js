"use strict";(self.webpackChunkblog2=self.webpackChunkblog2||[]).push([[7040],{9293:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-f8ded232",path:"/javascript/promise.html",title:"Promise",lang:"en-US",frontmatter:{title:"Promise"},excerpt:"",headers:[{level:2,title:"References",slug:"references",children:[]},{level:2,title:"Summary",slug:"summary",children:[]},{level:2,title:"new Promise()",slug:"new-promise",children:[]},{level:2,title:"then方法",slug:"then方法",children:[]},{level:2,title:"其它API",slug:"其它api",children:[{level:3,title:"Promise局限性",slug:"promise局限性",children:[]}]},{level:2,title:"Promise/A+",slug:"promise-a",children:[]}],filePathRelative:"javascript/promise.md",git:{updatedTime:163774408e4,contributors:[{name:"guyong",email:"jcel@qq.com",commits:1}]}}},615:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const p=(0,e._)("h2",{id:"references",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#references","aria-hidden":"true"},"#"),(0,e.Uk)(" References")],-1),t={href:"https://medium.com/@ningxia/javascript-promises-under-the-hood-4ce853fcb2c9",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("Javascript promise, under the hood."),c=(0,e._)("p",null,'This article illustrate how promise works by writing its own promise library squab. It clearly shows what "promise" generally looks like.',-1),l={href:"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("Promise by 廖雪锋"),i=(0,e.uE)('<h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><p>注意区分：决议（resolve), 完成（fulfill) 拒绝（reject) 异常(error)</p><p>A Promise represents a value which may be available now, or in the future, or never. Before ES6, it&#39;s just a syntactical sugar for asynchronous function callback. (Not for ES6, in which promise has <em>built-in async support.</em>{.b}</p><p>ES6在事件队列（macroqueue)的基础上，增加了一个任务队列（microqueue)。 microqueue的优先级更高，js引擎每处理完一个macroqueue事件，它都会优先处理所有的microqueue中的事件，等microqueue中的事件处理完后再处理macroqueue中的下一个事件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-1&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token function">promisify</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 0 1 2 3 -1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Problems with callback</p><ol><li>非线性，难理解，易出错</li><li>信任问题，控制反转 <ul><li>过早调用 （Zalgo风险）</li><li>过晚调用（或不调用)</li><li>调用次数过多或过少</li><li>未能传递所需的环境或参数</li><li>吞掉可能出现的错误和异常</li></ul></li></ol><blockquote><p>Promise并没有摈弃回调，只是把回调的安排转交给了一个位于我们和其它工具之间的可信任的中介机制。</p></blockquote><p>Some notes for <code>promise</code>:</p><ol><li>流程控制</li><li>注册事件</li><li>如何调度的:同一promise的then调用顺序？不同promise的then调用顺序？</li><li>由于promise决议后只能有一个值（或一个拒绝理由), resolve/reject 只接受一个参数，其它参数会被忽略(<code>{tc-b} 避免传递参数混乱</code>)。多次调用resolve 也会只执行第一个（<em>避免过多调用</em>{.b}）。</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>v<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span>w</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//0 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol start="5"><li>Promise 把整个操作（包括异常）变成了异步，避免了Zalgo风险. 从而使得<code>then</code>可以在‘操作’的后面提供 resolve/reject 参数. 注意，构造promise时，虽然 resolve/reject 是以参数形式存在，但是可以自由使用它们。以下面的promisify为例：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    \t<span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>ajax函数是立即执行的，它可以把 （此时空的）resolve 当作回调。然而，当ajax函数异步完成后需要调用 resolve 时，Promise机制可以保证 resolve的调用顺利地进行。如何保证？首先ajax是异步调用resolve的，即使把ajax换成同步函数，promise也会使其异步化（<em>避免过早调用</em>{.b}），这样可以保证在request同一个tick中，通过then得到的resolve都是已经准备就绪的。注意，即使不在同一个tick中注册的resolve函数也会被顺利执行(<em>避免过晚或过少调用</em>{.b}）。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span>  p <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> q <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> z <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>\n<span class="token comment">//1 2 3 4 5 6 7 8 9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ol start="6"><li><p>Promise.resolve() 会展开thenable的值,从而得到可信任的promise。若传入的参数是真正的promise, Promise.resilve() 什么都不会做，只会直接返回这个参数。</p></li><li><p>resolve和reject的返回值会作为then返回的新promise的决议值。resolve/reject都可以得到新的未决议的promise (可能fullfill,也可能reject). 注意区分当前promise和then得到的新promise, 当前reject，但then得到的新promise是既可以fullfill又可以reject的。 然而，<code>new Promise</code>中的 resolve/reject则不同。 若提供的参数是promise, resolve会展开它，决议值是该参数promise的决议值（可能是完成的也可能是拒绝的）。而reject的决议值则只能是拒绝的。因此 <code>new Promise( function(resolve,reject){})</code> 中的 resolve 确实是“决议” （而非完成）的意思。而then方法中最好理解为 <code>then(fulfilled, rejected)</code>. 前者中resolve/reject 是形参，后者中 fulfilled/rejected 是实参。</p></li><li><p>then未提供resolve或reject时，默认的resolve/reject会把当前决议值（或拒绝理由）传递下去。<code>catch(err){}</code> 则是<code>then(null, function(err){})</code> 的缩写。</p></li><li><p>promise chain中的错误（异常或reject)可以通过在chain的末端加一个<code>catch()</code>来处理，如果中间的then没有rejected处理，那么默认的rejected函数会将该错误往下传。唯一的问题是最后的catch仍返回一个可能出错的promise，这个问题ES6本身没有提供解决方案。</p></li></ol><h2 id="new-promise" tabindex="-1"><a class="header-anchor" href="#new-promise" aria-hidden="true">#</a> <code>new Promise()</code></h2><ol><li><code>new Promise(function(resolve,reject){})</code> 中形参resolve/reject对应的实参是 Promise.resolve/Promise.reject. 以下两种构造是等价的</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> p <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> q <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li><code>new Promise()</code> 中的代码的立即执行的（当前tick)， 其中的resolve/reject语句是异步执行的，其它语句（之前和之后的）可以看作是同步的。</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 0 1 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="3"><li><code>new Promise(null)</code> 并不会返回一个rejected promise, 而是抛出异常。因为promise构造过程中出现异常会使得promise构造失败。</li></ol><h2 id="then方法" tabindex="-1"><a class="header-anchor" href="#then方法" aria-hidden="true">#</a> <code>then</code>方法</h2><ol><li>调用promise的<code>then()</code> 会自动创建一个新的promise从调用返回</li><li>在then的resolve/reject内部，如果返回一个值或抛出一个异常，新返回的promise就相应地决议为该值.</li><li>如果resolve/reject 返回一个promise, 它将会被<em>展开</em>{.r}，不管它的决议值是什么，都会成为then返回的新promise的决议值。(新返回的promise的决议值是那个promise展开后的值，不是那个promise本身）</li></ol><h2 id="其它api" tabindex="-1"><a class="header-anchor" href="#其它api" aria-hidden="true">#</a> 其它API</h2><p><code>all</code>, <code>race</code>, <code>none</code>, <code>any</code>, <code>first</code>, <code>last</code></p><h3 id="promise局限性" tabindex="-1"><a class="header-anchor" href="#promise局限性" aria-hidden="true">#</a> Promise局限性</h3><ol><li>promise chain返回的是最后一个promise, 没有保存中间promise的引用，无法在外面给中间的promise关联处理函数。若中间的promise有自己的错误处理，则最后的promise不会得到错误的通知 （除非中间的错误处理函数继续产生拒绝）。这与<code>try...catch...</code>类似。</li><li>promise只能决议为单一值，需要多个值的话可以封闭成单个值，但是在复杂的场景中会比较笨重。一种方法是可以分解成多个promise后用promise.all来处理。</li><li>promise只能决议一次，不能像监听事件一样，事件每发生一次相应的监听函数就会被调用一次。一种方法是每次事件触发后构造一个新的promise.</li><li>已有代码大都基于回调，需要手动promisify. 可以编写类似于<code>Promise.wrap()</code>的函数来解决，该wrap函数返回一个promisory. promisory调用才返回一个promise. 例如 <code>let request = Promise.wrap(ajax);</code> ES6并未提供类似的wrap函数。</li><li>promise无法取消。一种方法是用“门” 来hack. 单独的promise不应该可取消，但是取消一个promise chain是合理的。</li></ol><h2 id="promise-a" tabindex="-1"><a class="header-anchor" href="#promise-a" aria-hidden="true">#</a> Promise/A+</h2>',29),r={href:"https://promisesaplus.com",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("The official specification"),m=(0,e.uE)('<p>A &#39;promise&#39; is an object or function with a <code>then</code> method whose behavior conforms to this specification.</p><p>A promise must be in one of three states: pending, fulfilled, or rejected.</p><p>When pending, a promise:</p><ul><li>may transition to either the fulfilled or rejected state.</li></ul><p>When fulfilled, a promise:</p><ul><li>must not transition to any other state.</li><li>must have a value, which must not change. When rejected, a promise:</li><li>must not transition to any other state.</li><li>must have a reason, which must not change.</li></ul><p>Here, “must not change” means immutable identity (i.e. ===), but does not imply deep immutability.</p><p>A promise must provide a then method to access its current or eventual value or reason.</p><p>A promise’s then method accepts two arguments (both are optional, non-function are ignored):</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>promise.then(onFulfilled, onRejected)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>then</code> must return a promise</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p1 creating...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//execute immediately</span>\n    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;rejecting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//transit to fulfilled</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;resolving&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//invalid</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p1 created&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//execute immediately</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>\np1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>output:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>p1 creating...\np1 created\nobject\nPromise { &lt;rejected&gt; &#39;rejecting&#39; }\nrejecting\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',14),b={},d=(0,a(3744).Z)(b,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",t,[o,(0,e.Wm)(a)])]),c,(0,e._)("p",null,[(0,e._)("a",l,[u,(0,e.Wm)(a)])]),i,(0,e._)("p",null,[(0,e._)("a",r,[k,(0,e.Wm)(a)])]),m],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);