"use strict";(self.webpackChunkblog2=self.webpackChunkblog2||[]).push([[1713],{2521:(e,i,t)=>{t.r(i),t.d(i,{data:()=>l});const l={key:"v-c1bba338",path:"/algorithm/graph.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"Minimum Height Trees(MHTs)",slug:"minimum-height-trees-mhts",children:[]}],filePathRelative:"algorithm/graph.md",git:{updatedTime:163774408e4,contributors:[{name:"guyong",email:"jcel@qq.com",commits:1}]}}},4586:(e,i,t)=>{t.r(i),t.d(i,{default:()=>b});var l=t(6252);const n=(0,l._)("h3",{id:"minimum-height-trees-mhts",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#minimum-height-trees-mhts","aria-hidden":"true"},"#"),(0,l.Uk)(" Minimum Height Trees(MHTs)")],-1),o=(0,l._)("p",null,"Given a tree T, find all the roots that make the minimum height.",-1),r=(0,l.uE)("<li><p>solution 1 Find any longest path, its <em>middle point(s)</em>{.b} is the answer. Finding a longest path can be solved in $O(n)$ time by tree dp, or simply <em>2 tree travesal</em>{.b}.</p></li><li><p>solution 2 Use direct dp, let <code>dp[i]</code> be the height of the tree when the tree root is <code>i</code>, compute <code>dp[0],...,dp[n - 1]</code> by tree dp in a dfs manner. In dfs, when we reach node u, let T be the subtree by removing all u&#39;s descendants. We also maintain a variable acc that keeps track of the length of the longest path in T with u being on end. Then we have <code>dp[u] = max(height[u], acc)</code>. In dfs, when we move from u to its child v, then <code>newAcc = max(acc + 1, height[v&#39;]+2)</code> for all other child <code>v&#39;</code> of <code>u</code>. We can compute it in $O(1)$ time by maintaining two heights of each node <code>u</code>, one is the conventional height, the other is the height after removing the branch w.r.t. the convention height.</p></li>",2),a=(0,l.Uk)("solution 3 Iterately prune leaves. Use "),h=(0,l._)("code",null,"Set",-1),s=(0,l.Uk)(" to denote the adjancency, compute the answer in O(n) time. "),c={href:"https://leetcode.com/problems/minimum-height-trees/discuss/76052",target:"_blank",rel:"noopener noreferrer"},d=(0,l.Uk)("Leetcode solution 1 and 2"),m={href:"https://leetcode.com/problems/minimum-height-trees/discuss/76055",target:"_blank",rel:"noopener noreferrer"},u=(0,l.Uk)("Leetcode solution 3"),p=(0,l.uE)("<p>Graph Algorithm (4+3+3+5 = 15 algs)</p><ol><li>Elementary <ul><li>BFS</li><li>DFS</li><li>Topological Sort</li><li>SCC</li></ul></li><li>MST <ul><li>Generic-MST</li><li>Kruskal</li><li>Prim</li></ul></li><li>SSSP <ul><li>Bellman-Ford</li><li>SSSP-DAG</li><li>Dijkstra</li></ul></li><li>APSP <ul><li>Slow-Matrix-Mulplication</li><li>Faster-Matrix-Mulplication</li><li>Floyd-Warshall</li><li>Transitive Clousure</li><li>Johnson</li></ul></li></ol>",2),g={},b=(0,t(3744).Z)(g,[["render",function(e,i){const t=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[n,o,(0,l._)("ul",null,[r,(0,l._)("li",null,[(0,l._)("p",null,[a,h,s,(0,l._)("a",c,[d,(0,l.Wm)(t)]),(0,l._)("a",m,[u,(0,l.Wm)(t)])])])]),p],64)}]])},3744:(e,i)=>{i.Z=(e,i)=>{const t=e.__vccOpts||e;for(const[e,l]of i)t[e]=l;return t}}}]);