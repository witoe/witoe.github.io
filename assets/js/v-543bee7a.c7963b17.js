"use strict";(self.webpackChunkblog2=self.webpackChunkblog2||[]).push([[3969],{2779:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-543bee7a",path:"/javascript/scope_and_closure.html",title:"Scope and Closure",lang:"en-US",frontmatter:{title:"Scope and Closure"},excerpt:"",headers:[{level:2,title:"Lexical scope",slug:"lexical-scope",children:[{level:3,title:"block scope",slug:"block-scope",children:[]},{level:3,title:"提升",slug:"提升",children:[]},{level:3,title:"Scope chain",slug:"scope-chain",children:[]}]},{level:2,title:"Closure",slug:"closure",children:[]},{level:2,title:"References",slug:"references",children:[{level:3,title:"1. scope objects",slug:"_1-scope-objects",children:[]},{level:3,title:"2. this",slug:"_2-this",children:[]}]}],filePathRelative:"javascript/scope_and_closure.md",git:{updatedTime:163774408e4,contributors:[{name:"guyong",email:"jcel@qq.com",commits:1}]}}},8493:(n,s,a)=>{a.r(s),a.d(s,{default:()=>j});var e=a(6252);const o=(0,e.uE)('<p>Notes for &quot;scope&quot; and &quot;closure&quot;.</p><h2 id="lexical-scope" tabindex="-1"><a class="header-anchor" href="#lexical-scope" aria-hidden="true">#</a> Lexical scope</h2><p>Javascript only has lexical scope, but not dynamic scope:</p><ul><li>lexical scope: 在写代码（或定义）时确定的，关心的是函数在何处声明，而不关心何处调用。</li><li>dynamic scope: 不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调用。换句话说， 作用域链是基于（运行时）调用栈的。</li></ul><p><code>this</code> 也是在动态调用时确定的，this机制某种程度上很像动态作用域。</p><h3 id="block-scope" tabindex="-1"><a class="header-anchor" href="#block-scope" aria-hidden="true">#</a> block scope</h3><p><code>for</code> <code>if</code> <code>try{}catch(){}</code> ES6之前 <code>var</code>不能定义块作用域变量，只能通过<code>try...catch...</code>来模拟。ES6之后可以用<code>let</code> 和 <code>const</code> 来声明块作用域变量。</p><p>注意： let/const用在for上面时，let/const 会绑定到每个循环块中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 每次迭代都会绑定 const i = ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="提升" tabindex="-1"><a class="header-anchor" href="#提升" aria-hidden="true">#</a> 提升</h3><ol><li>只有声明本身会被提升，赋值不会</li><li>函数声明会被提升，函数表达式不会</li><li>函数会先于变量提升</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//TypeError</span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// baz</span>\n\n<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> baz\n<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="4"><li>重复var声明会被忽略，但后面出现的函数声明还是会覆盖前面的</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 2 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="scope-chain" tabindex="-1"><a class="header-anchor" href="#scope-chain" aria-hidden="true">#</a> Scope chain</h3><p>注意区分 ReferenceError 与 TypeError: 一个是scope查找失败，一个是查找成功后的操作非法。 运行时identifier查找分种：LHS 和 RHS. 两种查找都会从当前的scope object一直往上，直到查找成功，或到达 root (即global scope). RHS查找失败会抛出 ReferenceError, LHS查找在stric mode下也会抛出 ReferenceError, 在非strict mode下则会在当前scope中定义该identifer. 对RHS查找的值进行不合理的操作会抛出TypeError.</p><p>javascript 引擎对于语句 <code>var a = 2</code> 会分两步执行 <code>var a, a = 2</code>. 若当前scope中<code>a</code>已存， 则<code>var a</code> 会被忽略。</p><p>区分函数声明与函数表达式: 看<code>function</code>关键字是否是整个声明的第一个词 函数声明：将函数名注入到当前scope 函数表达式： 函数名只在当前表达式中有效 （例如 IIFE)</p><h2 id="closure" tabindex="-1"><a class="header-anchor" href="#closure" aria-hidden="true">#</a> Closure</h2><p>注意区分function, function object 与 scope object:</p><ol><li>代码执行前，所有的function声明构成一棵树 <em>function tree</em>{.b}（由函数的定义很明显可以看出）。</li><li>代码执行(在某个scope object中）到某个function声明时，会生成一个该function的一个function object, 该function object 会关联到该 scope object (可以把该scope object叫作该function object的出生地scope）</li></ol><blockquote><p>each funciton object has a reference to its &quot;birth scope&quot;, each call of this function object results a child scope which inherits that &quot;birth scope&quot; Some may define closure to be the definition of a function along with its reference to the scope chain. A scope is created only when the funciton is called. But, I prefer use scope and closure interchangably.</p></blockquote><ol start="3"><li>每个function object的每次调用会产生一个不可见的scope object，该scope object会指向该function object的出生地scope。 因此，所有的scope objects也构成一棵树 <em>scope tree</em>{.b}：因为除了global scope外，每个scope object 都指向一个出生地scope. 每个scope向上构成一条<em>scope chain</em>{.b}.</li><li>main script 可以看作外面封装了一个IIFE函数 <code>(function(){ //scripts })()</code></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> bar1<span class="token punctuation">,</span> bar2\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> a <span class="token operator">=</span> x\n    <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        bar1 <span class="token operator">=</span> baz<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        bar2 <span class="token operator">=</span> baz<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>  <span class="token comment">// 一个 foo object (处于global scope中）</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 二个 foo scope object (对应两个 baz object)</span>\n\n<span class="token function">bar1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">bar2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 两个baz object 分别产生各自的scope object, 各自关联到不同的foo scope object</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ol start="5"><li>总结一下，funciton object(不是function声明！） 产生于当前的scope, 并且会<em>指向</em>{.b}（reference)该scope, function object每次调用会生成对应的function scope. 可以理解为每个function object有一个scope object 在外面包（closure)着它, 从而该funciton object调用时能访问这个 closure。scope object是树型嵌套的. 函数调用执行完后，相应的scope obejct若没有reference, 则会被垃圾回收掉。若有内部函数传递出来，则因为该内部函数reference 这个scope object, 导致它不会垃圾回收。另外，这个scope object（closure)内部的变量成为私有的，只能由传递出来的函数访问。</li></ol><blockquote><p>function object可以记住它的出生地scope, 若该function object在其它scope中调用，就产生了闭包。</p></blockquote><ol start="6"><li><p>一般说来，function object若没有传出声明所在的scope，那么根据lexical scope就能访问外面的变量，有些人就不会把这个scope叫做closure。只有某个function object （变量object不行）传到其它 scope中调用，才能发挥出 closure的作用。个人认为即使在声明所在的scope里调用，也当作是 closure.</p></li><li><p>除了function scope, 块也有scope</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token function">setTimeout</span><span class="token punctuation">(</span>funciton <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 0 1 2 3 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="8"><li>闭包实现模块(ES6之前） 要用作真正的模块，需满足：</li></ol><ul><li>必须有外部的函数, 该函数必须至少调用一次（生成closure/scope), 每次调用生成一个新的模块实例</li><li>返回值里面必须有内部函数(否则原scope会被垃圾回收），通过这个内部函数可以访问closure中的私有变量</li></ul><p>简单的修改可以实现单例模式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">CoolModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token comment">//...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><em>ES6的模块API更加稳定</em>{.r}</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>',34),t={href:"https://dmitryfrank.com/articles/js_closures",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("How do JavaScript closures work under the hood"),c=(0,e.Uk)("[^1]"),l=(0,e.uE)('<p>This is the best article I&#39;ve read that illustrats how &quot;closures&quot; works and what is going on behind the scene when they&#39;re used.</p><h3 id="_1-scope-objects" tabindex="-1"><a class="header-anchor" href="#_1-scope-objects" aria-hidden="true">#</a> 1. scope objects</h3><p>Each function object has a &quot;scope&quot; property that points to the scope the function is defined. Whenever a function is called, a corresponding scope is created. (If same function is called multiple times, then multiple seprate scope object are created.) This new created scope object has a pointer pointing to its parent scope object, which is the scope property of the function object, resulting in a scope chain.</p><p>Scope chain works as same as prototype chain, except that <code>ReferenceError</code> is throwed rather than <code>undefiend</code> is returned.</p><p>Whenever there is a reference to it, a scope exists, even if the corresponding function is returned. Otherwise, it will be garbage-collected on occasion.</p><h3 id="_2-this" tabindex="-1"><a class="header-anchor" href="#_2-this" aria-hidden="true">#</a> 2. this</h3><p><code>this</code> is not saved as a part of the scope chain. Instead, value of <code>this</code> depends on the &quot;function invocation pattern&quot;.</p><ul><li>method invocation pattern (implicit binding)</li><li>function invocation pattern (default binding)</li><li>constructor invocation pattern (<code>new</code> binding)</li><li>apply invocation pattern (explicit binding) Function.prototype.apply/call/bind/</li></ul><p>Priority: <code>new</code> &gt; explicit &gt; implicit &gt; default</p><p>Note:</p><ul><li>explicit binding <code>this</code> to <code>null</code> results in default binding</li><li><code>(p.foo = foo)()</code> is default binding, not implicit binding (to <code>p</code>)</li><li><code>this</code> in arrow function is binded according to outer function (the function in which the arrow function is defined)</li></ul><p>dom中事件注册可以用以下方法</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>document.getElementById(&#39;btn&#39;).onclick = function () {\n    let that = this\n    let cb = function(){\n        alert(that.id)  // btn\n    }\n    cb()\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的<code>that</code>会指向 &quot;#btn&quot;这个 element 是因为, onclick最终会被该 element 调用，类似 <code>document.getElementById(&#39;btn&#39;).onclick</code> 具体可以看下面的例子：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let a = {\n    name: &quot;a&quot;\n}\nname = &quot;global&quot;\na.fun = function(){\n    let that = this\n    let cb = function(){\n        console.log(that.name)\n        console.log(this.name)\n    }\n    cb()\n}\n\nb = {\n    name: &quot;b&quot;,\n    fun: a.fun\n}\nc = a.fun\na.fun()  // a global\nb.fun()  // b global\nc()   // global global\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',15),i=(0,e.Uk)("For more details on closure, also refer to [^2] and [^3] [^1]: "),r={href:"https://dmitryfrank.com/articles/js_closures",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("Dmitry Frank. How do JavaScript closures work under the hood ?"),b=(0,e.Uk)("[^2]: "),d={href:"http://stackoverflow.com/questions/111102/how-do-javascript-closures-work",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("Stackoverflow. Several excellent introductions to closures. (especially the two most voted)"),m=(0,e.Uk)("."),f=(0,e.Uk)("[^3]: "),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("MDN. Function reference"),v={},j=(0,a(3744).Z)(v,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,(0,e._)("p",null,[(0,e._)("a",t,[p,(0,e.Wm)(a)]),c]),l,(0,e._)("p",null,[i,(0,e._)("a",r,[u,(0,e.Wm)(a)])]),(0,e._)("p",null,[b,(0,e._)("a",d,[k,(0,e.Wm)(a)]),m]),(0,e._)("p",null,[f,(0,e._)("a",h,[g,(0,e.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);