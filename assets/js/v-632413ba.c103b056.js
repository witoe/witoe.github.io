"use strict";(self.webpackChunkblog2=self.webpackChunkblog2||[]).push([[6603],{1885:(e,t,r)=>{r.r(t),r.d(t,{data:()=>p});const p={key:"v-632413ba",path:"/dev/design-patterns.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"dev/design-patterns.md",git:{updatedTime:163774408e4,contributors:[{name:"guyong",email:"jcel@qq.com",commits:1}]}}},5619:(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});const p=(0,r(6252).uE)("<p>Google研院的Peter Norvig大叔总结了23个design pattern在lisp/python等函数式语言之下的对应物。</p><p>引用如下</p><p>=====================================================</p><p>16 of 23 patterns are either invisible or simpler, due to:</p><p>First-class types (6): Abstract-Factory, Flyweight, Factory-Method, State, Proxy, Chain-Of-Responsibility</p><p>First-class functions (4): Command, Strategy, Template-Method, Visitor</p><p>Macros (2): Interpreter, Iterator</p><p>Method Combination (2): Mediator, Observer</p><p>Multimethods (1): Builder</p><p>Modules (1): Facade</p><p>=====================================================</p><p>总结：</p><p>Design Pattern揭露了OOP系统本身的不灵活</p>",13),o={},s=(0,r(3744).Z)(o,[["render",function(e,t){return p}]])},3744:(e,t)=>{t.Z=(e,t)=>{const r=e.__vccOpts||e;for(const[e,p]of t)r[e]=p;return r}}}]);